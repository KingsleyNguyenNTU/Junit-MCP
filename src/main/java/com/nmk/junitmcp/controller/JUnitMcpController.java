package com.nmk.junitmcp.controller;

import com.nmk.junitmcp.dto.CoverageResult;
import com.nmk.junitmcp.dto.RunRequest;
import com.nmk.junitmcp.dto.RunResponse;
import com.nmk.junitmcp.junit_platform.CoverageAnalyzer;
import com.nmk.junitmcp.junit_platform.TestResultCollector;
import org.jacoco.core.tools.ExecFileLoader;
import org.junit.platform.launcher.Launcher;
import org.junit.platform.launcher.LauncherDiscoveryRequest;
import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;
import org.junit.platform.launcher.core.LauncherFactory;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/mcp/junit")
public class JUnitMcpController {
    @PostMapping
    public RunResponse runTests(@RequestBody RunRequest request) throws Exception {
        // 1. Build JUnit discovery request
        LauncherDiscoveryRequest discoveryRequest = LauncherDiscoveryRequestBuilder.request()
                .selectors(request.toSelectors())
                .build();

        // 2. Run tests
        Launcher launcher = LauncherFactory.create();
        TestResultCollector collector = new TestResultCollector();
        launcher.registerTestExecutionListeners(collector);
        launcher.execute(discoveryRequest);

        return getRunResponse(collector);
    }

    private static RunResponse getRunResponse(TestResultCollector collector) throws IOException {
        // 3. Load JaCoCo coverage
        String execFilePath = "target/jacoco.exec"; // generated by jacoco-maven-plugin
        Map<String, CoverageResult> coverageMap = new HashMap<>();
        File execFile = new File(execFilePath);
        if (execFile.exists()) {
            ExecFileLoader loader = new ExecFileLoader();
            loader.load(execFile);
            CoverageAnalyzer analyzer = new CoverageAnalyzer(loader);
            coverageMap = analyzer.analyze();
        }

        // 4. Response
        RunResponse response = new RunResponse();
        response.setResults(collector.getResults());
        response.setCoverage(coverageMap);
        return response;
    }
}
